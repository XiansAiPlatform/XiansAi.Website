{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Xians.ai Documentation","text":"<p>Welcome to the official documentation for Xians.ai. Here you'll find everything you need to get started with our platform and make the most of our services.</p>"},{"location":"#quick-navigation","title":"Quick Navigation","text":"<ul> <li> <p>Getting Started - Set up and create your first flow</p> </li> <li> <p>Instructions - Working with instructions</p> </li> <li> <p>Agents - Using agents</p> </li> </ul>"},{"location":"#code-samples","title":"Code Samples","text":"<ul> <li>All Samples</li> </ul>"},{"location":"#github","title":"GitHub","text":"<ul> <li>Visit our GitHub repository</li> </ul>"},{"location":"#latest-updates","title":"Latest Updates","text":"<p>Stay tuned for the latest updates and features. Follow our changelog for detailed release information.</p>"},{"location":"1-getting-started/1-setting-up/","title":"Setting Up a Flow Project","text":""},{"location":"1-getting-started/1-setting-up/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have installed:</p> <ul> <li>.NET 9 SDK</li> </ul>"},{"location":"1-getting-started/1-setting-up/#creating-your-project","title":"Creating Your Project","text":"<p>Xians.ai flows run as standard .NET applications, which can be executed locally or deployed to any server environment. Let's create a new project:</p> <pre><code>dotnet new console -n MyNewXiansAiFlow\ncd MyNewXiansAiFlow\n</code></pre>"},{"location":"1-getting-started/1-setting-up/#installing-the-sdk","title":"Installing the SDK","text":"<p>Add the Xians.ai SDK to your project:</p> <pre><code>dotnet add package XiansAi.Lib\n</code></pre> <p>Local Development</p> <p>If you're working with a local copy of the XiansAi.Lib repository, add it as a project reference in your .csproj file: <pre><code>&lt;ItemGroup&gt;\n    &lt;ProjectReference Include=\"..\\XiansAi.Lib\\XiansAi.Lib.csproj\" /&gt;\n&lt;/ItemGroup&gt;\n</code></pre></p>"},{"location":"1-getting-started/1-setting-up/#understanding-the-platform","title":"Understanding the Platform","text":"<p>The XiansAi platform consists of two main components:</p>"},{"location":"1-getting-started/1-setting-up/#app-server","title":"App Server","text":"<ul> <li>Manages your flows and instructions</li> <li>Provides monitoring and visualization</li> <li>Handles flow administration</li> </ul>"},{"location":"1-getting-started/1-setting-up/#flow-server","title":"Flow Server","text":"<ul> <li>Executes your flows</li> <li>Manages workflow state and persistence</li> <li>Handles distributed execution</li> </ul>"},{"location":"1-getting-started/1-setting-up/#configuration-setup","title":"Configuration Setup","text":"<ol> <li> <p>Get API Keys</p> <p>First, visit the XiansAi portal's Settings section to copy your App Server and Flow Server API Keys:</p> <p></p> </li> <li> <p>Configure Environment Variables</p> <p>Add the following configuration to your Program.cs file to configure the <code>FlowRunnerService</code> with XiansAi platform.</p> <p><code>Program.cs &gt;</code></p> <pre><code>using XiansAi.Flow;\n\nEnvironment.SetEnvironmentVariable(\"APP_SERVER_URL\", \"&lt;your-app-server-url&gt;\");\nEnvironment.SetEnvironmentVariable(\"APP_SERVER_API_KEY\", \"&lt;your-app-server-api-key&gt;\");\nEnvironment.SetEnvironmentVariable(\"FLOW_SERVER_URL\", \"&lt;your-flow-server-url&gt;\");\nEnvironment.SetEnvironmentVariable(\"FLOW_SERVER_NAMESPACE\", \"&lt;your-flow-server-namespace&gt;\");\nEnvironment.SetEnvironmentVariable(\"FLOW_SERVER_API_KEY\", \"&lt;your-flow-server-api-key&gt;\");\n\nvar flowRunner = new FlowRunnerService();\n\n// Register the flow (see the next section for more details)\n</code></pre> <p>Using Environment Files</p> <p>For better security and maintainability, use a .env file to manage your configuration: You can use a package like DotNetEnv to load the environment variables from the <code>.env</code> file without hardcoding them in your code.</p> <p><code>.env file &gt;</code> <pre><code># Platform environment variables\n\nFLOW_SERVER_URL=tenant-xyz.ozqzb.tmprl.cloud:7233\nFLOW_SERVER_NAMESPACE=tenant-xyz.ozqzb\nFLOW_SERVER_API_KEY=12fsd-0fidsfdsfkjsdfnsdfdskdsbf...\n\nAPP_SERVER_URL=https://api.xians.ai\nAPP_SERVER_API_KEY=12fsd-0fidsfdsfkjsdfnsdfdskdsbf...\n</code></pre> Update your Program.cs: <code>Program.cs &gt;</code> <pre><code>using XiansAi.Flow;\nusing DotNetEnv;\n// Load the environment variables from the .env file\nEnv.Load();\nvar flowRunner = new FlowRunnerService();\n</code></pre></p> </li> </ol>"},{"location":"1-getting-started/1-setting-up/#validating-your-setup","title":"Validating Your Setup","text":"<p>Test your configuration:</p> <pre><code>...\nvar flowRunner = new FlowRunnerService();\nawait flowRunner.TestMe(); // temp method to validate the configuration\n</code></pre> <p>Run the application:</p> <pre><code>dotnet run\n</code></pre> <p>If no errors occur, your setup is complete. Remember to remove the <code>TestMe()</code> call after validation.</p> <p>Troubleshooting</p> <p>Common issues include:</p> <ul> <li>Incorrect certificate paths</li> <li>Missing environment variables</li> <li>Invalid credentials</li> </ul>"},{"location":"1-getting-started/1-setting-up/#next-steps","title":"Next Steps","text":"<p>With your environment configured, you're ready to create your first flow.</p>"},{"location":"1-getting-started/2-first-flow/","title":"Your First Flow","text":""},{"location":"1-getting-started/2-first-flow/#creating-a-flow","title":"Creating a Flow","text":"<p>To create a new flow, create a class that inherits from <code>XiansAi.Flow.FlowBase</code>.</p> <p>Tip</p> <p>This example demonstrates a simple flow. In later sections, we'll explore more complex flows using <code>Agents</code> and <code>Instructions</code>.</p> <p><code>SimpleFlow.cs &gt;</code></p> <pre><code>using Temporalio.Workflows;\nusing XiansAi.Flow;\n\n[Workflow]\npublic class SimpleFlow: FlowBase\n{\n    [WorkflowRun]\n    public async Task&lt;string&gt; Run(string name)\n    {\n        var output = \"Hello\";\n        await DelayAsync(TimeSpan.FromSeconds(10));\n        output += \" World \" + name;\n        return await Task.FromResult(output + $\" {name}!\");\n    }\n}\n</code></pre> <p>Important</p> <p>Each workflow name must be unique within your organization. You can view existing workflow definitions in the XiansAI portal. To customize a workflow's name, use the [Workflow] attribute: <pre><code>[Workflow(\"My New Named Flow\")]\npublic class SimpleFlow: FlowBase\n</code></pre></p> <p>Did you know?</p> <p>Xians.ai supports long-running (persistent) flows. This means your workflow can be paused for days or months and will automatically resume when the delay period ends.</p>"},{"location":"1-getting-started/2-first-flow/#enabling-flow-visualization","title":"Enabling flow visualization","text":"<p>To enable flow visualization, you need to bundle the flow's source code into the assembly. Add the following XML to your <code>.csproj</code> file:</p> <pre><code>  &lt;ItemGroup&gt;\n    &lt;!-- Embed the flow source files --&gt;\n    &lt;EmbeddedResource Include=\"SimpleFlow.cs\"&gt;\n        &lt;LogicalName&gt;%(Filename)%(Extension)&lt;/LogicalName&gt;\n    &lt;/EmbeddedResource&gt;\n  &lt;/ItemGroup&gt;\n</code></pre> <p>This configuration embeds the SimpleFlow.cs file as a resource in your assembly.</p> <p>Tip</p> <p>If your flow file is in a subdirectory, specify the full path in the Include attribute. For example: Include=\"MyNamespace/SimpleFlow.cs\"</p>"},{"location":"1-getting-started/2-first-flow/#registering-the-flow-runner","title":"Registering the Flow Runner","text":"<p>To register your flow, add it to the Flow Runner in your Program.cs file:</p> <p><code>Program.cs &gt;</code></p> <pre><code>using XiansAi.Flow;\nusing DotNetEnv;\n\n// Env config via DotNetEnv\nEnv.Load(); // OR Manually set the environment variables\n\n// Define the flow\nvar flowInfo = new FlowInfo&lt;SimpleFlow&gt;();\n\n// Cancellation token cancelled on ctrl+c\nvar tokenSource = new CancellationTokenSource();\nConsole.CancelKeyPress += (_, eventArgs) =&gt;{ tokenSource.Cancel(); eventArgs.Cancel = true;};\n\ntry\n{\n    // Run the flow by passing the flow info to the FlowRunnerService\n    await new FlowRunnerService().RunFlowAsync(flowInfo, tokenSource.Token);\n}\ncatch (OperationCanceledException)\n{\n    Console.WriteLine(\"Application shutdown requested. Shutting down gracefully...\");\n}\n</code></pre> <p>To start the flow runner:</p> <pre><code>dotnet build    \ndotnet run\n</code></pre> <p>The Flow Runner will now wait for flow execution requests. To start a new flow, visit the 'Flow Definitions' section in the XiansAI portal and click the 'Start New' button for your SimpleFlow.</p> <p>Duplicate Name Error</p> <p>If you receive this error: <pre><code>&gt; Bad Request: \"Another user has already used this flow type name SimpleFlow. Please choose a different flow name.\"\n</code></pre> You'll need to choose a unique name using the [Workflow] attribute as shown earlier.</p> <p>'DotNetEnv' could not be found</p> <p>If you receive this error: <pre><code>&gt; The type or namespace name 'DotNetEnv' could not be found (are you missing a using directive or an assembly reference?)\n</code></pre> You'll need to install the <code>DotNetEnv</code> package. See the Getting Started section for more information.</p> <p></p> <p>You can view flow definition details and visualizations in the XiansAI portal.</p> <p></p>"},{"location":"1-getting-started/2-first-flow/#running-the-flow","title":"Running the Flow","text":"<p>To execute your flow:</p> <ol> <li>Navigate to the flow definitions page</li> <li>Click the 'Start New' button</li> <li>Monitor the 'Flow Runs' section to track your flow's execution</li> </ol> <p>Note: It may take a few seconds for your flow run to appear. Refresh the page if needed.</p> <p></p>"},{"location":"1-getting-started/2-first-flow/#next-steps","title":"Next Steps","text":"<p>Now that you've created your first flow, learn how to create a Flow with Activities to explore more advanced flow capabilities.</p> <p>Create a Flow with Activities</p>"},{"location":"1-getting-started/3-activity-flow/","title":"Flow Activities","text":""},{"location":"1-getting-started/3-activity-flow/#what-are-activities","title":"What are Activities?","text":"<p>Activities are the fundamental building blocks of a flow that handle external interactions and IO operations. They represent discrete steps in your workflow that interact with external systems, such as:</p> <ul> <li>Making HTTP requests</li> <li>Reading/writing to databases</li> <li>Calling external services</li> <li>File system operations</li> </ul>"},{"location":"1-getting-started/3-activity-flow/#understanding-flow-architecture","title":"Understanding Flow Architecture","text":""},{"location":"1-getting-started/3-activity-flow/#the-flow-class","title":"The Flow Class","text":"<p>The <code>Flow</code> class serves as the orchestrator and defines the sequence of activities to be executed. While powerful in coordinating activities, the Flow class itself:</p> <ul> <li>Cannot perform direct IO operations</li> <li>Should only contain workflow logic and activity coordination</li> <li>Acts as a configuration layer using the full power of C#</li> </ul>"},{"location":"1-getting-started/3-activity-flow/#activities","title":"Activities","text":"<p>Activities are where the actual work happens:</p> <ul> <li>Implemented as classes that inherit from <code>ActivityBase</code></li> <li>Define concrete implementations of IO operations</li> <li>Can be tested and mocked independently</li> <li>Are executed by the Flow orchestrator</li> </ul> <p>Flow Constraints</p> <p>Flow.ai uses Temporal as its underlying workflow engine. Temporal provides: - Durability for long-running workflows - Automatic retry mechanisms - State management - Error handling You can read more about Flow constraints in the Temporal documentation.</p>"},{"location":"1-getting-started/3-activity-flow/#example-movie-suggestion-flow","title":"Example: Movie Suggestion Flow","text":"<p>Let's create a practical example that demonstrates activity usage by building a movie suggestion system. This flow will:</p> <ol> <li>Fetch user details from an external API</li> <li>Get movie suggestions based on the user information</li> </ol>"},{"location":"1-getting-started/3-activity-flow/#1-define-the-flow-class","title":"1. Define the Flow Class","text":"<p>First, create the workflow class that orchestrates the activities:</p> <p><code>&gt; MovieSuggestionFlow.cs</code></p> <pre><code>using Temporalio.Workflows;\nusing Temporalio.Activities;\nusing XiansAi.Flow;\n\n[Workflow(\"Movie Suggestion Flow\")]\npublic class MovieSuggestionFlow: FlowBase\n{\n    [WorkflowRun]\n    public async Task&lt;object[]&gt; Run(string commaSeparatedUserIds)\n    {\n        // Initialize a list to store the results\n        var result = new List&lt;object&gt;();\n\n        // Split the comma separated user ids into an array of integers\n        var userIds = commaSeparatedUserIds.Split(',').Select(int.Parse).ToArray();\n\n        // Iterate over each user id\n        foreach (var id in userIds)\n        {\n            // Step 1: Fetch user details from JSONPlaceholder\n            var userName = await RunActivityAsync(\n                    (IUserActivity a) =&gt; a.GetUserNameAsync(id));\n\n            // Step 2: Get a movie suggestion from Movie API\n            var movie = await RunActivityAsync(\n                    (IMovieActivity a) =&gt; a.GetMovieAsync(userName));\n\n            // Add the result to the list\n            result.Add(new { User = userName, Movie = movie });\n        }\n\n        return result.ToArray();\n    }\n}\n\n// Activity interfaces define the contract for our activities\npublic interface IUserActivity\n{\n    [Activity]\n    Task&lt;string?&gt; GetUserNameAsync(int id);\n}\n\npublic interface IMovieActivity\n{\n    [Activity]\n    Task&lt;string?&gt; GetMovieAsync(string? userName);\n}\n</code></pre>"},{"location":"1-getting-started/3-activity-flow/#2-implement-the-user-activity","title":"2. Implement the User Activity","text":"<p>Create an activity to fetch user information:</p> <p><code>&gt; UserActivity.cs</code></p> <pre><code>using System.Text.Json;\nusing XiansAi.Activity;\n\npublic class UserActivity : ActivityBase, IUserActivity\n{\n    private readonly HttpClient _client = new HttpClient();\n    private static string URL = \"https://jsonplaceholder.typicode.com/users/{0}\";\n\n    public async Task&lt;string?&gt; GetUserNameAsync(int id)\n    {\n        var response = await _client.GetStringAsync(string.Format(URL, id));\n        return JsonSerializer.Deserialize&lt;JsonDocument&gt;(response)?.RootElement\n            .GetProperty(\"name\").GetString();\n    }\n}\n</code></pre>"},{"location":"1-getting-started/3-activity-flow/#3-implement-the-movie-activity","title":"3. Implement the Movie Activity","text":"<p>Create an activity to fetch movie suggestions:</p> <p><code>&gt; MovieActivity.cs</code></p> <pre><code>using System.Text.Json;\nusing XiansAi.Activity;\n\npublic class MovieActivity : ActivityBase, IMovieActivity \n{\n    private readonly HttpClient _client = new HttpClient();\n    private static string URL = \"https://freetestapi.com/api/v1/movies/{0}\";\n\n    public async Task&lt;string?&gt; GetMovieAsync(string? userName)\n    {\n        var randonInt = Random.Shared.Next(1, 10);\n        var response = await _client.GetStringAsync(string.Format(URL, randonInt));\n        var result = JsonSerializer.Deserialize&lt;JsonDocument&gt;(response);\n        return result?.RootElement.GetProperty(\"title\").GetString();\n    }\n}\n</code></pre>"},{"location":"1-getting-started/3-activity-flow/#4-configure-and-run-the-flow","title":"4. Configure and Run the Flow","text":"<p>Set up the flow runner in your program:</p> <p><code>&gt; Program.cs</code></p> <pre><code>using XiansAi.Flow;\nusing DotNetEnv;\nusing Microsoft.Extensions.Logging;\n\n// Load environment configuration\nEnv.Load();\n\n// Configure logging\nFlowRunnerService.SetLoggerFactory(LoggerFactory.Create(builder =&gt; \n    builder\n        .SetMinimumLevel(LogLevel.Debug)\n        .AddConsole()\n));\n\n// Setup cancellation token for graceful shutdown\nvar tokenSource = new CancellationTokenSource();\nConsole.CancelKeyPress += (_, eventArgs) =&gt;{ \n    tokenSource.Cancel(); \n    eventArgs.Cancel = true;\n};\n\n// Configure the flow\nvar flowInfo = new FlowInfo&lt;MovieSuggestionFlow&gt;();\nflowInfo.AddActivities&lt;IUserActivity&gt;(new UserActivity());\nflowInfo.AddActivities&lt;IMovieActivity&gt;(new MovieActivity());\n\ntry\n{\n    var runner = new FlowRunnerService();\n    await runner.RunFlowAsync(flowInfo, tokenSource.Token);\n}\ncatch (OperationCanceledException)\n{\n    Console.WriteLine(\"Application shutdown requested. Shutting down gracefully...\");\n}\n</code></pre>"},{"location":"1-getting-started/3-activity-flow/#running-the-flow","title":"Running the Flow","text":"<ol> <li>Build and run the application:</li> </ol> <pre><code>dotnet build\ndotnet run\n</code></pre> <ol> <li> <p>The Flow Runner will start and wait for execution requests.</p> </li> <li> <p>To execute a flow:</p> <ul> <li>Navigate to the XiansAI portal</li> <li>Go to 'Flow Definitions' section</li> <li>Find your 'MovieSuggestionFlow'</li> <li>Click 'Start New' to begin execution</li> </ul> </li> </ol>"},{"location":"1-getting-started/3-activity-flow/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Activity Design</p> <ul> <li>Keep activities focused on a single responsibility</li> <li>Make activities idempotent when possible</li> <li>Handle errors appropriately within activities</li> </ul> </li> <li> <p>Flow Design</p> <ul> <li>Use the Flow class for orchestration only</li> <li>Consider custom retry policies for activities as required</li> </ul> </li> <li> <p>Testing</p> <ul> <li>Unit test activities independently</li> <li>Mock external services in tests</li> <li>Test different failure scenarios</li> </ul> </li> </ol>"},{"location":"1-getting-started/3-activity-flow/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Instructions</li> </ul>"},{"location":"2-instructions/1-manage-instructions/","title":"Manage Instructions","text":""},{"location":"2-instructions/1-manage-instructions/#what-are-instructions","title":"What are Instructions?","text":"<p>Instructions are essential components that guide how AI agents (or other conventional agents) behave in your activities. Think of instructions as a set of rules and guidelines that define:</p> <ul> <li>How agents should respond to different situations</li> <li>What tone and style they should use</li> <li>What tasks they should perform</li> <li>What limitations they should observe</li> <li>How output should be formatted</li> </ul> <p>Most agents in XiansAI are designed to be flexible and can adapt their behavior based on the instructions you provide. This allows you to customize agents for different use cases without creating new ones from scratch.</p>"},{"location":"2-instructions/1-manage-instructions/#creating-instructions","title":"Creating Instructions","text":"<p>To create new instructions:</p> <ol> <li>Log in to the XiansAI portal</li> <li>Navigate to the Instructions section</li> <li>Click the \"Create New Instruction\" button</li> </ol> <p></p>"},{"location":"2-instructions/1-manage-instructions/#best-practices-for-writing-instructions","title":"Best Practices for Writing Instructions","text":"<ul> <li>Be specific and clear about what you want the agent to do</li> <li>Use examples when possible</li> <li>Break down complex tasks into smaller steps</li> <li>Include any necessary constraints or limitations</li> <li>Test your instructions with different scenarios</li> </ul>"},{"location":"2-instructions/1-manage-instructions/#versioning-instructions","title":"Versioning Instructions","text":"<p>Instructions in XiansAI support versioning, allowing you to:</p> <ul> <li>Track changes over time</li> <li>Roll back to previous versions if needed</li> <li>Test different variations of instructions</li> <li>Maintain consistency across your applications</li> </ul> <p></p>"},{"location":"2-instructions/1-manage-instructions/#creating-new-versions","title":"Creating New Versions","text":"<p>To create a new version:</p> <ol> <li>Open the instruction details page</li> <li>Click the 'Create New Version' button</li> <li>Make your changes to the instruction content</li> <li>Save the new version</li> </ol> <p></p>"},{"location":"2-instructions/1-manage-instructions/#version-management","title":"Version Management","text":"<ul> <li>By default, agents use the latest version of instructions</li> <li>You can specify a particular version when requesting for instructions</li> <li>Previous versions are preserved and can be restored if needed</li> </ul>"},{"location":"2-instructions/1-manage-instructions/#next-step","title":"Next Step","text":"<p>To understand how instructions work in XiansAI, let's see 2 examples:</p> <p>Flow without instructions</p>"},{"location":"2-instructions/2-without-instructions/","title":"Flow Without Instructions","text":"<p>This example demonstrates how to create a poetry generation flow using the Gemini API. The flow takes some words as input and returns a generated poem.</p>"},{"location":"2-instructions/2-without-instructions/#flow-overview","title":"Flow Overview","text":"<p>The PoetFlow consists of:</p> <ul> <li>A workflow that orchestrates the poem generation</li> <li>An activity that handles the Gemini API communication</li> <li>A program to run the flow</li> </ul>"},{"location":"2-instructions/2-without-instructions/#1-create-the-flow-definition","title":"1. Create the Flow Definition","text":"<p>First, create <code>PoetFlow.cs</code> which defines the workflow and activity interface:</p> <p><code>&gt; PoetFlow.cs</code></p> <pre><code>using Temporalio.Workflows;\nusing Temporalio.Activities;\nusing XiansAi.Flow;\n\n[Workflow(\"Poet Flow\")]\npublic class PoetFlow: FlowBase\n{\n    [WorkflowRun]\n    public async Task&lt;string?&gt; Run(string keywords)\n    {\n        var geminiActivity = new ComposerActivity();\n        var poem = await RunActivityAsync(\n                    (IComposerActivity c) =&gt; c.GeneratePoemAsync(keywords));\n        return poem;\n    }\n}\n\npublic interface IComposerActivity\n{\n    [Activity]\n    Task&lt;string?&gt; GeneratePoemAsync(string keywords);\n}\n</code></pre> <p>The <code>PoetFlow</code> class:</p> <ul> <li>Inherits from <code>FlowBase</code> to get core workflow functionality</li> <li>Is decorated with <code>[Workflow]</code> attribute to mark it as a Temporal workflow</li> <li>Contains a <code>Run</code> method that:</li> <li>Takes keywords as input</li> <li>Creates a composer activity</li> <li>Executes the poem generation</li> <li>Returns the generated poem</li> </ul> <p>The <code>IComposerActivity</code> interface defines the contract for poem generation.</p>"},{"location":"2-instructions/2-without-instructions/#2-implement-the-activity","title":"2. Implement the Activity","text":"<p>Create <code>ComposerActivity.cs</code> to handle the Gemini API interaction:</p> <p><code>&gt; ComposerActivity.cs</code></p> <pre><code>using System.Text.Json;\nusing XiansAi.Activity;\nusing System.Text;\n\npublic class ComposerActivity : ActivityBase, IComposerActivity \n{\n    private static string URL = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={0}\";\n\n    public async Task&lt;string?&gt; GeneratePoemAsync(string keywords)\n    {\n        var apiKey = Environment.GetEnvironmentVariable(\"GEMINI_API_KEY\");\n        var url = string.Format(URL, apiKey);\n\n        var instruction = \"Write a poem using the given keywords\";\n\n        var jsonPayload = CreateJsonPayload(instruction, keywords);\n        var jsonContent = new StringContent(JsonSerializer.Serialize(jsonPayload), Encoding.UTF8, \"application/json\");\n        var response = await new HttpClient().PostAsync(url, jsonContent);\n        var responseContent = await response.Content.ReadAsStringAsync();\n        return ExtractPoemFromResponse(responseContent);\n    }\n\n    private object CreateJsonPayload(string instruction, string keywords)\n    {\n        return new\n        {\n            contents = new[]\n            {\n                new\n                {\n                    parts = new[]\n                    {\n                        new { text = instruction },\n                        new { text = keywords }\n                    }\n                }\n            }\n        };\n    }\n\n    private string? ExtractPoemFromResponse(string responseContent)\n    {\n        var result = JsonSerializer.Deserialize&lt;JsonDocument&gt;(responseContent);\n\n        // Navigate through the JSON structure to get the poem text\n        var candidates = result?.RootElement.GetProperty(\"candidates\");\n        if (candidates.HasValue &amp;&amp; candidates.Value.GetArrayLength() &gt; 0)\n        {\n            var content = candidates.Value[0].GetProperty(\"content\");\n            var parts = content.GetProperty(\"parts\");\n            if (parts.GetArrayLength() &gt; 0)\n            {\n                return parts[0].GetProperty(\"text\").GetString();\n            }\n        }\n        return null;\n    }\n\n\n}\n</code></pre> <p>The <code>ComposerActivity</code> class:</p> <ul> <li>Inherits from <code>ActivityBase</code> and implements <code>IComposerActivity</code></li> <li>Handles communication with Gemini's API</li> <li>Contains methods to:<ul> <li>Generate poems using provided keywords</li> <li>Format the API request payload</li> <li>Parse the API response</li> </ul> </li> </ul>"},{"location":"2-instructions/2-without-instructions/#3-configure-gemini-api-access","title":"3. Configure Gemini API Access","text":"<p>You'll need a Gemini API key to use the service:</p> <ol> <li>Get your API key from Gemini API Key</li> <li>Add it to your <code>.env</code> file:</li> </ol> <pre><code>GEMINI_API_KEY=&lt;your-gemini-api-key&gt;\n</code></pre>"},{"location":"2-instructions/2-without-instructions/#4-setup-the-runner","title":"4. Setup the Runner","text":"<p>Create <code>Program.cs</code> to run the flow:</p> <p><code>&gt; Program.cs</code></p> <pre><code>using XiansAi.Flow;\nusing DotNetEnv;\nusing Microsoft.Extensions.Logging;\n\n// Env config via DotNetEnv\nEnv.Load(); // OR Manually set the environment variables\n\nFlowRunnerService.SetLoggerFactory(LoggerFactory.Create(builder =&gt; \n    builder\n        .SetMinimumLevel(LogLevel.Debug)\n        .AddConsole()\n));\n\n// Cancellation token cancelled on ctrl+c\nvar tokenSource = new CancellationTokenSource();\nConsole.CancelKeyPress += (_, eventArgs) =&gt;{ tokenSource.Cancel(); eventArgs.Cancel = true;};\n\n// Define the flow\nvar flowInfo = new FlowInfo&lt;PoetFlow&gt;();\nflowInfo.AddActivities&lt;IComposerActivity&gt;(new ComposerActivity());\n\ntry\n{\n    var runner = new FlowRunnerService();\n    // Run the flow by passing the flow info to the FlowRunnerService\n    await runner.RunFlowAsync(flowInfo, tokenSource.Token);\n}\ncatch (OperationCanceledException)\n{\n    Console.WriteLine(\"Application shutdown requested. Shutting down gracefully...\");\n}\n</code></pre> <p>The program:</p> <ul> <li>Loads environment variables</li> <li>Configures logging</li> <li>Sets up cancellation handling</li> <li>Creates and runs the flow using <code>FlowRunnerService</code></li> </ul>"},{"location":"2-instructions/2-without-instructions/#5-running-the-flow","title":"5. Running the Flow","text":"<ol> <li>Start the service:</li> </ol> <pre><code>dotnet run\n</code></pre> <ol> <li> <p>Use the XiansAI Portal:</p> <ul> <li>Go to 'Flow Definitions'</li> <li>Locate 'PoetFlow'</li> <li>Enter keywords (e.g., \"love, romance, moon, stars\")</li> <li>Click 'Start New'</li> </ul> </li> <li> <p>Monitor execution:</p> <ul> <li>Check 'Flow Runs' section</li> <li>Select your flow execution</li> <li>View results and details</li> </ul> </li> </ol>"},{"location":"2-instructions/2-without-instructions/#instruction-limitations","title":"Instruction - Limitations","text":"<p>The flow we implemented hard codes the instructions to the Gemini API. This is not ideal for a number of reasons.</p> <ul> <li>When business requirements change, we need to update the code.</li> <li>Business users are not able to change the instructions.</li> <li>We are not able to track the instructions used in the flow.</li> </ul> <p>In the next example, we will see how to manage instructions in XiansAI Portal instead of hard coding them in the code.</p> <p>Using Instructions</p>"},{"location":"2-instructions/3-using-instructions/","title":"Using Instructions","text":""},{"location":"2-instructions/3-using-instructions/#creating-instructions","title":"Creating Instructions","text":"<p>To create a new instruction:</p> <ol> <li>Navigate to the XiansAI Portal</li> <li>Go to the <code>Instructions</code> page</li> <li>Click <code>Create New</code></li> </ol> <p></p> <p>Fill in the following fields:</p> <ul> <li>Name: A unique identifier (e.g. <code>How to Generate a Poem</code>)</li> <li>Type: <code>Markdown</code></li> <li>Instruction: The actual instruction content in markdown format</li> </ul> <p>Example instruction content:</p> <pre><code># How to Generate a Poem\n\n## Your Role\nYou are a poet who creates engaging poems for children using given keywords.\n\n## Audience\nChildren aged 10-12 years old.\n\n## Your Task\nGenerate an engaging poem (~100 words) that incorporates all provided keywords.\n</code></pre>"},{"location":"2-instructions/3-using-instructions/#using-instructions-in-code","title":"Using Instructions in Code","text":""},{"location":"2-instructions/3-using-instructions/#1-decorate-activity-methods","title":"1. Decorate Activity Methods","text":"<p>Add the <code>[Instructions]</code> attribute to methods that should use instructions:</p> <p><code>&gt; PoetFlow.cs</code></p> <pre><code>public interface IComposerActivity\n{\n    [Activity]\n    [Instructions(\"How to Generate a Poem\")]\n    Task&lt;string?&gt; GeneratePoemAsync(string keywords);\n}\n</code></pre>"},{"location":"2-instructions/3-using-instructions/#2-load-instructions-in-activity-implementation","title":"2. Load Instructions in Activity Implementation","text":"<p>Use the <code>GetInstruction()</code> helper method to load instructions at runtime:</p> <p><code>&gt; ComposerActivity.cs</code></p> <pre><code>public class ComposerActivity : ActivityBase, IComposerActivity \n{\n    public async Task&lt;string?&gt; GeneratePoemAsync(string keywords)\n    {\n        // Load the instruction from XiansAI portal\n        var instruction = await GetInstruction() ?? throw new Exception(\"Instruction not found\");\n\n        // Use the instruction...\n    }\n}\n</code></pre>"},{"location":"2-instructions/3-using-instructions/#working-with-multiple-instructions","title":"Working with Multiple Instructions","text":"<p>You can specify multiple instructions for a single method:</p> <pre><code>[Instructions(\"How to Generate a Poem\", \"How to Generate a Story\")]\n</code></pre> <p>Load specific instructions by index (1-based):</p> <pre><code>// Load first instruction\nvar poemInstruction = await GetInstruction(1);\n\n// Load second instruction\nvar storyInstruction = await GetInstruction(2);\n</code></pre> <p>Note</p> <p>The <code>GetInstruction()</code> method is provided by <code>ActivityBase</code> and automatically fetches instructions from the XiansAI portal based on the <code>[Instructions]</code> attribute configuration.</p>"},{"location":"2-instructions/3-using-instructions/#next-steps","title":"Next Steps","text":"<p>Now we are able to use instructions in our code. Next, we will learn how to use <code>Agents</code>' to create more complex workflows.</p> <p>Next: Using Agents</p>"},{"location":"3-agents/1-agent-types/","title":"Xians.ai Agents","text":"<p>Agents are reusable software components that perform specific tasks within your business process flows. They serve as building blocks that can be composed together to create complex workflows.</p>"},{"location":"3-agents/1-agent-types/#activities-vs-agents","title":"Activities vs Agents","text":"<p>Activities sit in between the Flow and the Agent. The activity is responsible of following:</p> <ul> <li>Initiating the agent by setting required parameters</li> <li>Calling the agent and monitoring its progress</li> <li>Collecting and formatting the agent's output to the Flow</li> </ul>"},{"location":"3-agents/1-agent-types/#common-agent-use-cases","title":"Common Agent Use Cases","text":"<p>Agents can handle various tasks including:</p> <ul> <li>Natural language processing using LLMs</li> <li>Communication via platforms like MS Teams or Slack  </li> <li>Code review automation</li> <li>Integration with external systems (e.g. HubSpot)</li> <li>Web scraping and data collection</li> <li>Email automation</li> <li>Web search operations</li> </ul>"},{"location":"3-agents/1-agent-types/#agent-implementations","title":"Agent Implementations","text":"<p>Agents can be implemented using different approaches:</p> <ul> <li>Docker image</li> <li>As an External API (REST/gRPC)</li> <li>As a Software Package (NuGet)</li> </ul>"},{"location":"3-agents/1-agent-types/#agent-types","title":"Agent Types","text":""},{"location":"3-agents/1-agent-types/#1-package-agents","title":"1. Package Agents","text":"<p>Package agents are distributed as NuGet packages and integrate directly into Xians.ai activities through a .NET SDK interface.</p> <p>Advantages:</p> <ul> <li>Minimal setup required</li> <li>Efficient resource usage</li> <li>Direct integration with activity code</li> <li>Strong type safety</li> </ul> <p>Disadvantages:</p> <ul> <li>Requires .NET compatibility</li> <li>Tighter coupling with Xians.ai activities</li> </ul>"},{"location":"3-agents/1-agent-types/#2-docker-agents","title":"2. Docker Agents","text":"<p>Docker agents run in isolated containers, making them ideal for tasks requiring specific environments or dependencies. The Flow activity executes these agents via command line and waits for completion.</p> <p>Advantages:</p> <ul> <li>Environment isolation</li> <li>No local software installation needed</li> <li>Support for non-.NET technologies</li> <li>Automatic cleanup with --rm flag</li> </ul> <p>Disadvantages:</p> <ul> <li>Data transfer complexity (sometimes requires volume mounting)</li> <li>Additional Docker runtime overhead</li> <li>Dependency on Docker runtime</li> </ul>"},{"location":"3-agents/1-agent-types/#3-remote-agents","title":"3. Remote Agents","text":"<p>Remote agents expose HTTP or gRPC endpoints that Xians.ai activities can communicate with. The platform provides basic connectivity validation but requires custom integration code.</p> <p>Advantages:</p> <ul> <li>Language/platform agnostic</li> <li>Scalable deployment options</li> <li>Independent lifecycle management</li> </ul> <p>Disadvantages:</p> <ul> <li>Requires custom integration code</li> <li>Network dependency</li> <li>More complex error handling</li> </ul>"},{"location":"3-agents/1-agent-types/#4-custom-agents","title":"4. Custom Agents","text":"<p>Custom agents provide flexibility for unique integration needs that don't fit the standard agent types. They're typically used for:</p> <ul> <li>Legacy system integration</li> <li>Proprietary protocols</li> <li>Complex multi-system orchestration</li> <li>Special security requirements</li> </ul> <p>Note: Custom agents require more development effort but offer maximum flexibility for specific use cases.</p>"},{"location":"3-agents/2-using-agents/1-package-agents/","title":"Using Package Agents","text":"<p>Package agents are pre-built components distributed as NuGet packages that seamlessly integrate into Xians.ai activities through the .NET SDK interface. They provide ready-to-use functionality that can be easily incorporated into your workflows.</p>"},{"location":"3-agents/2-using-agents/1-package-agents/#installation","title":"Installation","text":"<p>Install the agent package into your project using the .NET CLI:</p> <pre><code>dotnet add package &lt;package-name&gt;\n</code></pre>"},{"location":"3-agents/2-using-agents/1-package-agents/#implementation-guide","title":"Implementation Guide","text":""},{"location":"3-agents/2-using-agents/1-package-agents/#1-define-the-activity-interface","title":"1. Define the Activity Interface","text":"<p>Add the <code>Agent</code> attribute to your activity interface to enable proper integration with the Xians.ai Portal:</p> <pre><code>[Agent(\"XiansAi.Agent.GoogleSearch\", AgentType.Package)]\npublic interface IUrlSearchActivity\n{\n    [Activity]\n    Task&lt;string?&gt; FindLinkedInUrl(string companyName);\n}\n</code></pre> <p>The <code>Agent</code> attribute requires two parameters:</p> <ul> <li><code>agentName</code>: The fully qualified name of the agent package</li> <li><code>agentType</code>: Set to <code>AgentType.Package</code> for package agents</li> </ul> <p>In the case of a package agent, this only serves information to the Xians.ai Portal. This attribute has no impact on the runtime of the workflow.</p>"},{"location":"3-agents/2-using-agents/1-package-agents/#2-implement-the-activity","title":"2. Implement the Activity","text":"<p>Create a class that inherits from <code>ActivityBase</code> and implements your interface:</p> <pre><code>public class UrlSearchActivity : ActivityBase, IUrlSearchActivity\n{\n    private readonly ISearchAgent _searchAgent;\n\n    public UrlSearchActivity()\n    {\n        var apiKey = Environment.GetEnvironmentVariable(\"API_KEY\");\n        // use the Nuget package to create an instance of the agent\n        _searchAgent = new GoogleSearchAgent(apiKey); // This is a hypothetical agent that we are using as an example\n    }\n\n    public async Task&lt;string?&gt; FindLinkedInUrl(string companyName)\n    {\n        // Utilize the agent's functionality\n        var results = await _searchAgent.SearchAsync($\"site:linkedin.com {companyName} company\");\n        return results.FirstOrDefault()?.Url;\n    }\n}\n</code></pre>"},{"location":"3-agents/2-using-agents/1-package-agents/#best-practices","title":"Best Practices","text":"<ul> <li>Always check the package documentation for specific configuration requirements</li> <li>Handle potential exceptions from agent operations</li> </ul>"},{"location":"3-agents/2-using-agents/2-docker-agents/","title":"Using Docker Agents","text":"<p>Docker agents are containerized applications that run within a Docker environment. They are deployed as Docker images and can be called through the Xians.ai Activity SDK.</p>"},{"location":"3-agents/2-using-agents/2-docker-agents/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed and running on your system</li> <li>Access to the required Docker images</li> </ul>"},{"location":"3-agents/2-using-agents/2-docker-agents/#implementation-guide","title":"Implementation Guide","text":""},{"location":"3-agents/2-using-agents/2-docker-agents/#1-define-the-activity-interface","title":"1. Define the Activity Interface","text":"<p>Add the <code>Agent</code> attribute to your activity interface, specifying the Docker image name and agent type as <code>AgentType.Docker</code>:</p> <pre><code>[Agent(\"xiansai/web-reader-agent\", AgentType.Docker)]\npublic interface IWebReaderActivity\n{\n    [Activity]\n    [Instructions(\"How to Read LinkedIn Company Pages\")]\n    Task&lt;LinkedInCompany?&gt; ReadLinkedInPage(string url);\n}\n</code></pre> <p>The <code>Agent</code> attribute requires:</p> <ul> <li><code>agentName</code>: The Docker image name (e.g., \"xiansai/web-reader-agent\")</li> <li><code>agentType</code>: Set to <code>AgentType.Docker</code> for Docker agents</li> </ul>"},{"location":"3-agents/2-using-agents/2-docker-agents/#2-implement-the-activity","title":"2. Implement the Activity","text":"<p>Create a class that inherits from <code>ActivityBase</code> and implements your interface:</p> <pre><code>public class WebReaderActivity : ActivityBase, IWebReaderActivity\n{\n    private static readonly string MOUNT_PATH = \"/prompt.txt\";\n\n    public async Task&lt;LinkedInCompany?&gt; ReadLinkedInPage(string url)\n    {\n        // Get instructions from server\n        var instructionFilePath = await GetInstructionAsTempFile() \n            ?? throw new Exception(\"Failed to get instructions\");\n\n        // Create your docker agent\n        var readerAgent = GetDockerAgent();\n\n        // Set environment variables\n        readerAgent.SetEnv(\"OPENAI_MODEL\", Env.GetString(\"OPENAI_MODEL\"));\n        readerAgent.SetEnv(\"OPENAI_API_KEY\", Env.GetString(\"OPENAI_API_KEY\"));\n\n        // Mount volumes for file access\n        readerAgent.SetVolume(instructionFilePath, MOUNT_PATH);\n\n        // Set command line arguments\n        var commandLineArguments = new Dictionary&lt;string, string&gt;\n        {\n            { \"source\", url },\n            { \"prompt-file\", MOUNT_PATH }\n        };\n\n        var result = await readerAgent.DockerRun(commandLineArguments);\n        return DeserializeLinkedInCompany(result.Output);\n    }\n}\n</code></pre>"},{"location":"3-agents/2-using-agents/2-docker-agents/#configuration-options","title":"Configuration Options","text":""},{"location":"3-agents/2-using-agents/2-docker-agents/#environment-variables","title":"Environment Variables","text":"<p>Docker agents can be configured using environment variables through the <code>SetEnv</code> method:</p> <pre><code>readerAgent.SetEnv(\"VARIABLE_NAME\", \"value\");\n</code></pre>"},{"location":"3-agents/2-using-agents/2-docker-agents/#volume-mounting","title":"Volume Mounting","text":"<p>To share files between your host and the Docker container:</p> <pre><code>readerAgent.SetVolume(hostPath, containerPath);\n</code></pre>"},{"location":"3-agents/2-using-agents/2-docker-agents/#port-mapping","title":"Port Mapping","text":"<p>To map ports between your host and the Docker container:</p> <pre><code>readerAgent.SetPort(hostPort, containerPort);\n</code></pre>"},{"location":"3-agents/2-using-agents/2-docker-agents/#command-line-arguments","title":"Command Line Arguments","text":"<p>Pass arguments to the Docker container using a dictionary. You can also specify whether to run the container in detached mode and whether to remove the container after execution:</p> <pre><code>var arguments = new Dictionary&lt;string, string&gt;\n{\n    { \"argument-name\", \"value\" }\n};\nawait readerAgent.DockerRun(arguments, detach: false, remove: true);\n</code></pre>"},{"location":"3-agents/2-using-agents/2-docker-agents/#health-check","title":"Health Check","text":"<p>To wait until the Docker container is healthy, use the <code>UntilHealthy</code> method with a specified timeout:</p> <pre><code>bool isHealthy = await readerAgent.UntilHealthy(timeoutSeconds: 30);\n</code></pre>"},{"location":"3-agents/2-using-agents/2-docker-agents/#best-practices","title":"Best Practices","text":"<ul> <li>Always handle Docker agent exceptions appropriately</li> <li>Clean up temporary files after Docker execution</li> <li>Use environment variables for sensitive configuration</li> <li>Ensure proper access permissions for mounted volumes</li> <li>Follow Docker security best practices</li> </ul>"},{"location":"3-agents/2-using-agents/3-custom-agents/","title":"Using Custom Agents","text":"<p>Custom agents are fully custom implementations in your Activity classes. They are not distributed as NuGet packages, nor are they containerized. They are simply Activity classes with your own custom logic that are registered in your workflow configuration. It is not recommended to use this unless you have a very specific use case that cannot be met by the other agent types.</p>"},{"location":"3-agents/2-using-agents/3-custom-agents/#implementation-guide","title":"Implementation Guide","text":""},{"location":"3-agents/2-using-agents/3-custom-agents/#1-define-the-activity-interface","title":"1. Define the Activity Interface","text":"<p>Add the <code>Agent</code> attribute to your activity interface to enable proper integration with the Xians.ai Portal:</p> <pre><code>[Agent(\"&lt;Give a name to your agent&gt;\", AgentType.Custom)]\npublic interface IUrlSearchActivity\n{\n    [Activity]\n    Task&lt;string?&gt; FindLinkedInUrl(string companyName);  \n}\n</code></pre> <p>The Agent attribute is not required for the activity runtime, but it is required for the Portal to know that this activity is a custom agent.</p>"},{"location":"3-agents/2-using-agents/3-custom-agents/#2-implement-the-activity","title":"2. Implement the Activity","text":"<p>Implement the activity interface in a class:</p> <pre><code>public class UrlSearchActivity : ActivityBase, IUrlSearchActivity\n{\n    public async Task&lt;string?&gt; FindLinkedInUrl(string companyName)\n    {\n        // Your custom logic here\n    }\n}\n</code></pre>"}]}